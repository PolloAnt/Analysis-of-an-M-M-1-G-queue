[General]
network = Network

# Tempi di interarrivo dei job esponenziali di media 1/Lambda,
# dove il parametro Lambda può assumere i valori 2.0, 1.4, 1.2 e 1.0.
**.source.interArrivalTime = exponential(${Lambda=1.0, 0.83, 0.71, 0.5}s)

**.source.startTime = 0s

# Il router inserisce un nuovo job in arrivo nel sistema solo se esiste almeno un server in grado di servirlo.
# La logica dell'inserimento è definita in un apposito algoritmo di routing, implementato manualmente.
**.router.routingAlgorithm = "exactAdmissionControl"

[Config SingleServer]
description = "Configurazione con un solo servente"

#La deadline di un job può essere uniformemente distribuita in due diversi intervalli [a,b] --> [0.5, 2.0] e [0.5, 4.0]
**.source.jobDeadline = uniform(${a1=0.5,0.5}s, ${b1=2.0, 4.0}s)

# Nella configurazione con un solo server, il tempo di servizio è un'esponenziale negativa di media 1/Mu1 con Mu1 = 3
*.queues[0].serviceTime = exponential(${Mu1=0.33}s)

repeat = 20
sim-time-limit = 100000s

[Config DoubleServer]
description = "Configuration con due serventi che lavorano in parallelo"

**.numberOfServers = 2

#La deadline di un job può essere uniformemente distribuita in due diversi intervalli [a,b] --> [0.5, 1.0] e [0.5, 3.0]
**.source.jobDeadline = uniform(${a2=0.5, 0.5}s, ${b2=1.0, 3.0}s)

# Nella configurazione con due server, il tempo di servizio è un'esponenziale negativa di media 1/Mu1 con Mu1 = 2.8 per il primo server,
# un'esponenziale negativa di media 1/Mu2 con Mu2 = 3.2 per il secondo server
*.queues[0].serviceTime = exponential(${Mu1=0.35}s)
*.queues[1].serviceTime = exponential(${Mu2=0.31}s)

repeat = 20
sim-time-limit = 100000s




